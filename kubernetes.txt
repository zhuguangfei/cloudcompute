kubernetes：简称k8s，用于管理云平台中多个主机上的容器化的应用，目标是让部署容器化的应用简单并且高效；
            提供了应用部署，规划，更新，维护的一种机制。

            传统的应用部署方式是通过插件或脚本来安装应用。缺点是应用的运行、配置、管理、
            所有的生存周期与当前操作系统绑定，不利于应用的升级更新/回滚等操作，也可以通过虚拟机的方式
            某些功能，但是虚拟机非常重，并不利于可移植性。

            新的方式是通过容器方式实现，每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会
            相互影响，能区分计算资源。相对于虚拟机，容器能快速部署，由于容器与底层设施、机器文件系统解耦的，
            它能在不同云、不同操作系统间进行迁移。

            容器占用资源少、部署快，每个应用可以被打包成一个容器镜像，每个应用与容器间成一对一关系也使容器有
            更大优势，使用容器可以在build或release的阶段，因为每个应用不需要与其余的应用堆栈组合，
            也不依赖生产环境基础结构，这使得从研发到测试、生产能提供一致环境。类似地，容器比虚机轻量、更透明，
            这更便于监控和管理。

            是Google开源的一个容器编排引擎，支持自动化部署、大规模可伸缩、应用容器化管理。在生产环境中部署一个
            应用程序时，通常要部署应用的多个实例以便对应用请求进行负载均衡。在kubernetes中，可以创建多个容器，
            每个容器里面运行一个应用实例，然后通过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问，
            这些细节都不需要运维人员去进行复杂的手工配置和处理。

            特点：
                可移植：支持公有云、私有云、混合云、多重云
                可扩展：模块化、插件化、可挂载、可组合
                自动化：自动部署、自动重启、自动复制、自动伸缩/扩展

            组件：
                Master组件：
                    Master组件提供集群的管理控制中心。可以在集群中任何节点上运行，但为了简单起见，通常在一台
                    VM/机器上启动所有Master组件，并且不会在此VM/机器上运行用户容器。
                    kube-apiservier:用于暴漏Kubernetes API。任何资源请求/调用操作都是通过kube-apiserver提供的接口进行。
                    etcd是Kubernetes提供默认的存储系统，保存所有集群数据，使用时需要为etcd数据提供备份计划。
                    kube-controller-manager:运行管理控制器，他们是集群中处理常规任务的后台线程。逻辑上，每个控制器是一个
                    单独的进程，但是为了降低复杂度，他们都被编译成单个二进制文件，并在单个进程中进行。控制器包括：节点控制器、
                    副本控制器、端点控制器、Service Account和Token控制器。
                    cloud-controller-manager:
                    kube-scheduler:监视新创建没有分配到Node的Pod，为Pod选择一个Node。
                    DNS:
                    用户界面：kube-ui提供集群状态基础信息查看
                    容器资源监控：提供一个UI浏览器监控数据
                    Cluster-level Logging:负责保存容器日志，搜索/查看日志。
                节点(Node)组件：
                    节点组件运行在Node，提供Kubernetes运行是环境，以及维护Pod。
                    kubelet:是主要的节点代理，它会监视已分配给节点的pod，具体功能：
                        安装Pod所需的volume。
                        下载Pod的Secrets。
                        Pod中运行的 docker（或experimentally，rkt）容器。
                        定期执行容器健康检查。
                        Reports the status of the pod back to the rest of the system, by creating amirror podif necessary.
                        Reports the status of the node back to the rest of the system.
                    kube-proxy:通过在主机上维护网络规则并执行连接转发来实现Kubernetes服务抽象。
                    docker用于运行容器。
                    rkt运行容器，作为docker工具的替代方案。
                    supervisord是一个轻量级的监控系统，用于保障kubelet和docker运行。
                    fluentd是一个守护进程，可提供cluster-level logging。
